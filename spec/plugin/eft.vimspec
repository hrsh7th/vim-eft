let s:expect = themis#helper('expect')

Describe eft

  After each
    call eft#clear()
  End

  Describe same as native behavior
    It should work as native f
      for l:motion in ['fh', "\<Plug>(eft-f)h"]
        enew!
        call setline(1, ['あいうえお hijklmn'])
        call cursor([1, 1])
        call feedkeys(l:motion, 'x')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 17])
      endfor
    End
    It should work as native f in visual-mode
      for l:motion in ["vfh\<Plug>(eft-assert)", "v\<Plug>(eft-f)h\<Plug>(eft-assert)"]
        let g:eft_assert = {}
        function! g:eft_assert.step1() abort
          call s:expect(mode()).to_equal('v')
        endfunction
        enew!
        call setline(1, ['あいうえお hijklmn'])
        call cursor([1, 1])
        call feedkeys(l:motion, 'x')
      endfor
    End

    It should work as native t
      for l:motion in ['th', "\<Plug>(eft-t)h"]
        enew!
        call setline(1, ['あいうえお hijklmn'])
        call cursor([1, 1])
        call feedkeys(l:motion, 'x')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 16])
      endfor
    End

    It should work as native t in visual-mode
      for l:motion in ["vth\<Plug>(eft-assert)", "v\<Plug>(eft-t)h\<Plug>(eft-assert)"]
        let g:eft_assert = {}
        function! g:eft_assert.step1() abort
          call s:expect(mode()).to_equal('v')
        endfunction
        enew!
        call setline(1, ['abcdefg hijklmn'])
        call cursor([1, 1])
        call feedkeys(l:motion, 'x')
      endfor
    End

    It should work as native F
      for l:motion in ['Fh', "\<Plug>(eft-F)h"]
        enew!
        call setline(1, ['abcdefg hijklmn'])
        call cursor([1, 15])
        call feedkeys(l:motion, 'x')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 9])
      endfor
    End

    It should work as native T
      for l:motion in ['Th', "\<Plug>(eft-T)h"]
        enew!
        call setline(1, ['abcdefg hijklmn'])
        call cursor([1, 15])
        call feedkeys(l:motion, 'x')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 10])
      endfor
    End

    It should work as native df
      for l:motion in ['dfh', "d\<Plug>(eft-f)h"]
        enew!
        call setline(1, ['abcdefg hijklmn'])
        call cursor([1, 1])
        call feedkeys(l:motion, 'x')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
        call s:expect(getline(1)).to_equal('ijklmn')
      endfor
    End

    It should work as native dt
      for l:motion in ['dth', "d\<Plug>(eft-t)h"]
        enew!
        call setline(1, ['abcdefg hijklmn'])
        call cursor([1, 1])
        call feedkeys(l:motion, 'x')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
        call s:expect(getline(1)).to_equal('hijklmn')
      endfor
    End
  End

  Describe f

    It should match camel-case
      enew!
      call setline(1, ['CamelCase'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f)C", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 6])
    End

    It should match kebab-case
      enew!
      call setline(1, ['kebab-case'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f)c", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 7])
    End

    It should match snake-case
      enew!
      call setline(1, ['snake_case'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f)c", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 7])
    End

    It should match non-alphabetical chars
      enew!
      call setline(1, ['abcdefg;hijklmn'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f);", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 8])
    End
  End

  Describe t
    It should match camel-case
      enew!
      call setline(1, ['CamelCase'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-t)C", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 5])
    End

    It should match kebab-case
      enew!
      call setline(1, ['kebab-case'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-t)c", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 6])
    End

    It should match snake-case
      enew!
      call setline(1, ['snake_case'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-t)c", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 6])
    End

    It should match non-alphabetical chars
      enew!
      call setline(1, ['abcdefg;hijklmn'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-t);", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 7])
    End
  End

  Describe highlight
    It should not highlight
      enew!
      let l:highlight = g:eft_highlight
      let g:eft_highlight = {}
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      let l:Clear_highlight = eft#highlight(getline('.'), range(col('.') - 1, col('$') - 1), v:false)
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftChar"')).to_have_length(0)
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftSubChar"')).to_have_length(0)
      call l:Clear_highlight()
      let g:eft_highlight = l:highlight
    End

    It should highlight for normal mode
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      let l:Clear_highlight = eft#highlight(getline('.'), range(col('.') - 1, col('$') - 1), v:false)
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftChar"')).to_have_length(3) " 'a', 'b', ' '
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftSubChar"')).to_have_length(2) " -2 for ignoring space.
      call l:Clear_highlight()
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftChar"')).to_have_length(0)
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftSubChar"')).to_have_length(0)
    End

    It should highlight for operator-pending mode
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      let l:Clear_highlight = eft#highlight(getline('.'), range(col('.') - 1, col('$') - 1), v:true)
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftChar"')).to_have_length(3) " 'a', 'b', ' '
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftSubChar"')).to_have_length(0)
      call l:Clear_highlight()
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftChar"')).to_have_length(0)
      call s:expect(filter(getmatches(), 'v:val.group ==# "EftSubChar"')).to_have_length(0)
    End
  End

  Describe cancel
    It should work in normal mode
      let g:eft_assert = {}
      function! g:eft_assert.step1() abort
        call s:expect(mode()).to_equal('n')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
      endfunction
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      call feedkeys("<Plug>(eft-f)\<Esc>\<Plug>(eft-assert)", 'x')
    End
    It should work in visual mode
      let g:eft_assert = {}
      function! g:eft_assert.step1() abort
        call s:expect(mode()).to_equal('v')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
      endfunction
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      call feedkeys("v<Plug>(eft-f)\<Esc>\<Plug>(eft-assert)", 'x')
    End
    It should work in operator-pending mode
      let g:eft_assert = {}
      function! g:eft_assert.step1() abort
        call s:expect(mode()).to_equal('n')
        call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
      endfunction
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      call feedkeys("d<Plug>(eft-f)\<Esc>\<Plug>(eft-assert)", 'x')
    End
  End

  Describe repeatable
    It should repeat for normal mode
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f-repeatable)a", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 5])
      call feedkeys("\<Plug>(eft-f-repeatable)", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 9])
      call feedkeys("d\<Plug>(eft-t-repeatable)a", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 9])
      call s:expect(getline('.')).to_equal('abb abb abb')
    End

    It should repeat for operator-pending mode
      enew!
      call setline(1, ['abb'])
      call cursor([1, 1])
      call feedkeys("d\<Plug>(eft-t-repeatable)a", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
      call feedkeys(".", 'nx')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 1])
      call feedkeys(".", 'nx')
      call s:expect(getline('.')).to_equal('abb')
    End
  End

  Describe ;
    It should repeat
      enew!
      call setline(1, ['abb abb abb abb'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f)a", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 5])
      call feedkeys("\<Plug>(eft-repeat)", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 9])
      call feedkeys("d\<Plug>(eft-t)a", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 9])
      call s:expect(getline('.')).to_equal('abb abb abb')
    End
  End

  Describe ignorease
    It should match ignorecase
      let g:eft_ignorecase = v:true
      enew!
      call setline(1, ['IgnoreCase'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-f)c", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 7])

      enew!
      call setline(1, ['IgnoreCase'])
      call cursor([1, 1])
      call feedkeys("\<Plug>(eft-t)c", 'x')
      call s:expect(getpos('.')[1 : 2]).to_equal([1, 6])
      let g:eft_ignorecase = v:false
    End
  End

End

